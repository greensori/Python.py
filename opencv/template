import cv2
import numpy as np
from PIL import ImageGrab

size = (200, 200, 600, 600)

def canny(screen):
    img_gray = cv2.cvtColor(screen, cv2.COLOR_BGR2GRAY)
    img_gray = cv2.GaussianBlur(img_gray, (5, 5), 0)
    canny_edge = cv2.Canny(img_gray, 10, 70)
    ret, mask = cv2.threshold(canny_edge, 70, 255, cv2.THRESH_BINARY_INV)
    return mask

def harris(screen):
    gray = cv2.cvtColor(screen, cv2.COLOR_BGR2GRAY)
    gray = np.float32(gray)
    dst = cv2.cornerHarris(gray, 2, 3, 0.04)
    print dst
    dst = cv2.dilate(dst,None)
    screen[dst>0.01*dst.max()] = [0, 150, 0]
    return screen

def SIFT(screen):
    gray = cv2.cvtColor(screen, cv2.COLOR_BGR2GRAY)
    sift = cv2.SIFT()
    kp = sift.detect(gray,None)
    #screen=cv2.drawKeypoints(gray,kp)
    screen=cv2.drawKeypoints(gray,kp,flags=cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)
    return screen

def goodFeaturesToTrack(screen):
    gray = cv2.cvtColor(screen, cv2.COLOR_BGR2GRAY)
    corners = cv2.goodFeaturesToTrack(gray,10,0.01,10)
    corners = np.int0(corners)
    for i in corners:
        x,y = i.ravel()
        cv2.circle(screen, (x,y),3,255,-1)
    return  screen

def test():
    while True:
        screen = np.array(ImageGrab.grab(bbox=(size)))
        cv2.imshow('sample', goodFeaturesToTrack(screen))
        if cv2.waitKey(25) & 0xFF == ord('q'):
            cv2.destroyAllWindows()
            break


test()
    
