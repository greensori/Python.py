# -*- coding: utf-8 -*-
import matplotlib.pyplot as plt
from PIL import ImageGrab
from multiprocessing import process
from datetime import datetime
from datetime import date
import datetime as dtime
import numpy as np
import cv2
import time
import os
import psutil
import pyautogui
import Tkinter
import clipboard
import csv

#result of template match
match_list = []

#to save file number
file_no = 0
prevent_action = 0

#this will ussed in class goodForwork
click_raw = 1
autokey = 0
count_cap = 0
macro_key = 0
#set screen size
xsize = (0, 1250)
ysize = (150, 1055)

#set imagefiles
def imgfile_read(filelist):
    imglist = []
    for i in range(len(filelist)):
        imread_temp = cv2.imread(filelist[i], 0)
        imglist += [imread_temp,]
    return imglist

file_macro = ("img_title1.png", "img_main3.png", "img_title6.png", "img_info1.png", "img_info2.png")
imread_macro = imgfile_read(file_macro)



class csvcard:
    def __init__(self, data3):
        self.loc = 'D:\print\csv_temp.csv'        
        self.data4 = datetime.today().strftime("%y-%m-%d")
        self.data3 = data3
        '''
        if rb.get() == 4:
            self.data3 = 'register'
        elif rb.get() == 5:
            self.data3 = 'change'
        else:
            self.data3 = 'notin'
        '''
    def firstwrite(self):
        with open(self.loc, 'wb') as csvfile:
            writer = csv.writer(csvfile, delimiter = ',', quotechar = '|')
            writer.writerow(['obs', 'code', 'hp', 'type', 'date', 'result'])
    # num is target data that will substitute to new data
    def modifydata(self, location, obs, new_data, num):
        obs -= 1
        r = csv.reader(open(location))
        lines = [l for l in r]
        if num == 3:
            lines[obs][3] = new_data
            writer = csv.writer(open(location, 'w'))
            writer.writerows(lines)
        if num == 4:
            lines[obs][4] = new_data
            writer = csv.writer(open(location, 'w'))
            writer.writerows(lines)
        if num == 5:
            lines[obs][5] = new_data
            writer = csv.writer(open(location, 'w'))
            writer.writerows(lines)
    def card(self, name, phone, data5):
    ##if count2  value is '0' then writing new data
    ## if count2 value is '1' and rwcount = write then modify previuous data
        self.data1 = str(name)
        self.data2 = str(phone)
        self.data3 = str(self.data3)
        self.data4 = str(self.data4)
        count = 0
        count2 = 0
        with open(self.loc, 'rb') as csvfile:
            csvreader = csv.reader(csvfile, delimiter = ',', quotechar = '|')
            for row in csvreader:
                count += 1
                if row[1] == self.data1:
                    print "read exist data"
                    print row
                    count2 += 1
                    if row[3] <> self.data3:
                        self.modifydata(self.loc, count, self.data3, 3)
                        print "modified type information"
                    if row[4] <> self.data4:
                        self.modifydata(self.loc, count, self.data4, 4)
                        print "modified date information"
                    if data5 == 'renew':
                        self.modifydata(self.loc, count, 'renew', 5)
                        print "modified checking information"
                    elif data5 == 'notrenew':
                        self.modifydata(self.loc, count, 'notrenew', 5)
                        print 'file wasnt renew'
            if count2 == 0:
                print "write new data"
                with open(self.loc, 'a') as csvfile:
                    writer = csv.writer(csvfile, delimiter = ',', quotechar = '|')
                    writer.writerow([count, self.data1, self.data2, self.data3, self.data4, 'notin'])
        return count2

    

def matched_img(img_rgb, matched_gray, file_num):
    count = 0
    # temp_list = [file num + [position]]
    temp_list = [file_num]
    global match_list
    h, w = img_rgb.shape[::1]
    res = cv2.matchTemplate(matched_gray, img_rgb, cv2.TM_CCOEFF_NORMED)
    threshold = 0.8
    loc = np.where(res >= threshold)
    for pt in zip(*loc[::-1]):
        cv2.rectangle(matched_gray, pt, (pt[0] + w, pt[1] + h), (0, 0, 255), 2)
        count += 1
        temp_list += [pt]
        if len(zip(*loc[::-1])) == count:
            print ("complete", count, pt, "file_num", file_num)
            match_list += [temp_list]
    return matched_gray

class autoaction:
    #there is 2 types of screen and there are
    def __init__(self):
        global click_raw
        click_raw = 1
        #need to 4 files, menu file and registration file used in first phase
        # name, phonenumber additional files will be using in scond phase
        #im second phase will using csv writinds
        #csv files will savings the
    def work1(self):
        count = 0
        temp_time = 0
        # click raws is start1
        global click_raw
        global match_list
        global prevent_action
        match_list = []
        #this will returns pt
        while temp_time < 20 and count == 0:
            print ("Try %s times" %temp_time)
            temp_time += 1
            match_list = []
            temp_screen = np.array(ImageGrab.grab(bbox=(xsize[0], ysize[0], xsize[1], ysize[1])))
            temp_screen = cv2.cvtColor(temp_screen, cv2.COLOR_BGR2GRAY)
            temp_screen = matched_img(imread_macro[0], temp_screen, 'checker1')
            temp_screen = matched_img(imread_macro[1], temp_screen, 'checker2')
            for i in match_list:
                if i[0] == 'checker1' and count == 0:
                    for i in match_list:
                        if i[0] == 'checker2' and count == 0:
                            count += 1
                            click_raw += 1
                            max_len = (len(i) - 1)
                            pyautogui.moveTo(i[click_raw][0], i[click_raw][1] + ysize[0])
                            pyautogui.click(button = 'left')
                            if click_raw == max_len:
                                click_raw = 1
                                prevent_action = 1
                                print 'end of action'
        return count
    def work2(self):
        count = 0
        temp_time = 0
        global click_raw
        global match_list
        match_list = []
        while temp_time < 20 and count == 0:
            print ("Try %s times" %temp_time)
            temp_time += 1
            temp_screen = np.array(ImageGrab.grab(bbox=(xsize[0], ysize[0], xsize[1], ysize[1])))
            temp_screen = cv2.cvtColor(temp_screen, cv2.COLOR_BGR2GRAY)
            temp_screen = matched_img(imread_macro[2], temp_screen, 'title6')
            temp_screen = matched_img(imread_macro[3], temp_screen, 'nameinfo')
            temp_screen = matched_img(imread_macro[4], temp_screen, 'addedfile')
            for i in match_list:
                if i[0] == 'title6' and count == 0:
                    for i in match_list:
                        if i[0] == 'addedfile' and count == 0:
                            for i in match_list:
                                if i[0] == 'nameinfo' and count == 0:
                                    count += 1
                                    adjust = [(i[1][0] + 250, i[1][1] + ysize[0] + 1), (i[1][0] + 250, i[1][1] + ysize[0] + 66)]
                                    pyautogui.moveTo(adjust[0][0], adjust[0][1])
                                    pyautogui.click(button = 'left')
                                    pyautogui.hotkey('ctrl', 'c')
                                    name = clipboard.paste()
                                    pyautogui.moveTo(adjust[1][0], adjust[1][1])
                                    pyautogui.click(button = 'left')
                                    pyautogui.hotkey('ctrl', 'a')
                                    pyautogui.hotkey('ctrl', 'c')
                                    phone = clipboard.paste()
                                    pyautogui.press('esc')        
################modify here #################
        print name
        print phone
        datacard = csvcard('register')
        resultcard = datacard.card(name, phone, 'read')
        if resultcard == 0:
            adjust = [(i[1][0] + 460, i[1][1] + ysize[0] + 1), (i[1][0] + 760, i[1][1] + ysize[0] + 50)]
            temp_screen = np.array(ImageGrab.grab(bbox=(adjust[0][0], adjust[0][1], adjust[1][0], adjust[1][1])))
            temp_screen = cv2.cvtColor(temp_screen, cv2.COLOR_BGR2GRAY)
            cv2.imwrite('D:\print\pRoi\%s.png' %name, temp_screen)
            print 'ROI saved'
        elif resultcard == 1:
            temp_img = cv2.imread('D:\print\pRoi\%s.png' %name, 0)
            temp_screen = matched_img(temp_img, temp_screen, 'record')
            match_count = len(match_list)
            for i in match_list:
                match_count -= 1
                if i[0] == 'record':
                    try:
                        datacard.card(name, phone, 'notrenew')
                    except:
                        pass
                elif match_count == 0:
                    try:
                        datacard.card(name, phone, 'renew')
                    except:
                        pass
                    adjust = [(i[1][0] + 460, i[1][1] + ysize[0] + 1), (i[1][0] + 760, i[1][1] + ysize[0] + 50)]
                    temp_screen = np.array(ImageGrab.grab(bbox=(adjust[0][0], adjust[0][1], adjust[1][0], adjust[1][1])))
                    temp_screen = cv2.cvtColor(temp_screen, cv2.COLOR_BGR2GRAY)
                    cv2.imwrite('D:\print\pRoi\%s.png' %name, temp_screen)
                    print 'renew ROI saved'
                #tempmathch and check that he was chaged his file and renew date
                       

def newstart():
    start = autoaction()
    while prevent_action == 0:
        start.work1()
        start.work2()
        pyautogui.press('backspace')
    return

newstart()
